AWSTemplateFormatVersion: "2010-09-09"
Description: "(SO0042) - aws-content-analysis. Opensearch Consumer stack"

Parameters:
  NodeType:
    Description: "The node type to be provisioned for the Opensearch cluster"
    Type: String
    Default: "t3.small.search"
    AllowedValues:
      - "t3.small.search"
      - "m4.large.search"
      - "m4.xlarge.search"
      - "c4.large.search"
      - "c4.xlarge.search"
      - "r4.large.search"
      - "r4.xlarge.search"
    ConstraintDescription: "must be a valid Opensearch node type."
  NodeCount:
    Description: "The number of nodes in the Opensearch cluster."
    Type: Number
    Default: 2
  MieDataplaneBucket:
    Type: String
    Description: "Name of the dataplane bucket"
  AnalyticsStreamArn:
    Description: "Arn of the MIE kinesis data stream"
    Type: String

Mappings:
  SourceCode:
    General:
      RegionalS3Bucket: '%%REGIONAL_BUCKET_NAME%%'
      KeyPrefix: "aws-content-analysis/%%VERSION%%"

Resources:


# ARC311 Kibana stuff

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.192.0.0/16
      Tags:
        - Key: Name
          Value: ARC311 VPC

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: ARC311 IGW

  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    DependsOn: VPC
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", a,] ]
      CidrBlock: 10.192.10.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ARC311 Public Subnet 1

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ARC311 Public Routes
  
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  NginxGatewayRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'es:*'
                Resource: '*'
            Version: 2012-10-17
          PolicyName: NginxGateway-policy

  NginxInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    DependsOn:
      - NginxGatewayRole
    Properties:
      Roles:
        - !Ref NginxGatewayRole
      Path: /

  NginxInstanceSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for Nginx Reverse Proxy Instance
      VpcId: !Ref VPC


  SGIngressRuleHTTPS:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt NginxInstanceSG.GroupId
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 0.0.0.0/0

  SGIngressRuleHTTP:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt NginxInstanceSG.GroupId
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
  
  NginxElasticIP:
    Type: 'AWS::EC2::EIP'

  NginxElasticIpAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties: 
      AllocationId: !GetAtt NginxElasticIP.AllocationId
      InstanceId: !Ref NginxInstance

  # Deploy NGINX EC2 instance

  NginxInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn:
      - InternetGateway
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    Properties:
      ImageId: ami-0c2d06d50ce30b442
      IamInstanceProfile: !Ref NginxInstanceProfile
      InstanceType: t2.small
      NetworkInterfaces:
          - AssociatePublicIpAddress: 'true'
            DeleteOnTermination: 'true'
            DeviceIndex: '0'
            GroupSet: 
              - !GetAtt NginxInstanceSG.GroupId
            SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y aws-cfn-bootstrap cloud-init aws-cli
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource NginxInstance --region ${AWS::Region} --configsets ec2_setup
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource NginxInstance --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ec2_setup:
            - config_cfn
            - install_packages
            - config_nginx
            # - create_cert
            - start_services
        config_cfn:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.NginxInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource NginxInstance --region ${AWS::Region} --configsets ec2_setup
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_packages:
          commands:
            01_install_nginx:
              command: "amazon-linux-extras install -y nginx1"
        config_nginx:
          files:
            "/etc/nginx/nginx.conf":
              content: !Sub |
                worker_processes  auto;
                events {
                    worker_connections  1024;
                }
                http {
                    # ssl_session_cache shared:SSL:10m;
                    # ssl_session_timeout 10m;
                    sendfile on;
                    tcp_nopush on;
                    tcp_nodelay on;
                    keepalive_timeout 65;
                    types_hash_max_size 2048;
                    server_names_hash_bucket_size 128;
                    include /etc/nginx/mime.types;
                    default_type application/octet-stream;
                    gzip on;
                    gzip_disable "msie6";
                  
                  server {
                    listen       80;
                    location / {
                      proxy_http_version 1.1;
                      proxy_set_header Host https://${OpensearchServiceDomain.DomainEndpoint};
                      proxy_set_header Connection "Keep-Alive";
                      proxy_set_header Proxy-Connection "Keep-Alive";
                      proxy_pass https://${OpensearchServiceDomain.DomainEndpoint}/_plugin/kibana/;
                      proxy_set_header X-Real-IP ${NginxElasticIP};
                    }
                    location ~ (/_plugin/kibana|/app/kibana|/app/timelion|/bundles|/es_admin|/plugins|/api|/ui|/elasticsearch) {
                      proxy_pass              https://${OpensearchServiceDomain.DomainEndpoint};
                      proxy_set_header        X-Real-IP ${NginxElasticIP};
                    }
                  }
                }
        create_cert:
          commands:
            01_mkdir_ssl: 
              command: mkdir /etc/nginx/ssl
            02_ch_dir:
              command: cd /etc/nginx/ssl
            03_genrsa:
              command: openssl genrsa -out nginx.key 2048
            04_req_crt:
              command: openssl req -new -key nginx.key -out nginx.csr -subj "/C=XX/ST=XX/L=nginx/O=nginx/CN=nginx"
            05_x509:
              command: openssl x509 -req -days 365 -in nginx.csr -signkey nginx.key -out nginx.crt
            06_pem:
              command: cat nginx.key nginx.crt | tee nginx.pem
        start_services:
          commands:
            01_start_nginx:
              command: "systemctl restart nginx"
            02_onboot_nginx:
              command: "systemctl enable nginx"
  
  
  # Opensearch cluster

  # TODO: Best Practice - Resource found with an explicit name, this disallows updates that require replacement of this resource

  OpensearchServiceDomain:
    Type: "AWS::OpenSearchService::Domain"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W90
            reason: "This resource does not need to access any other resource provisioned within a VPC."
    Properties:
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 10
        VolumeType: gp2
      EncryptionAtRestOptions:
        Enabled: true
      NodeToNodeEncryptionOptions:
        Enabled: true
      ClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount:
          !Ref NodeCount
        ZoneAwarenessEnabled: false
        InstanceType:
          !Ref NodeType
      EngineVersion: Elasticsearch_7.10
      SnapshotOptions:
        AutomatedSnapshotStartHour: 0
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: 'es:*'
            Condition:
              IpAddress:
                'aws:SourceIp':
                  - !Ref NginxElasticIP

  # open search consumer lambda

  OpensearchConsumerLambda:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This resource does not need to access any other resource provisioned within a VPC."
          - id: W92
            reason: "This function does not performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "lambda_handler.lambda_handler"
      Role: !GetAtt StreamConsumerRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "RegionalS3Bucket"], Ref: "AWS::Region"]]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "KeyPrefix"],
              "esconsumer.zip",
            ],
          ]
      Runtime: "python3.7"
      Timeout: 900
      MemorySize: 2048
      Environment:
        Variables:
          EsEndpoint: !GetAtt OpensearchServiceDomain.DomainEndpoint
          DataplaneBucket: !Ref MieDataplaneBucket
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0042/%%VERSION%%"}'

  # stream event mapping for lambda

  StreamingFunctionEventMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      Enabled: true
      EventSourceArn: !Ref AnalyticsStreamArn
      FunctionName: !GetAtt OpensearchConsumerLambda.Arn
      StartingPosition: "LATEST"

  # IAM

  # TODO: Need to clean up this policy with regards to opensearch access
  StreamConsumerRole:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Lambda requires ability to write to cloudwatch *, as configured in the default AWS lambda execution role."
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-ElasticKinesisAccessPolicy"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "kinesis:DescribeStream"
                  - "kinesis:GetShardIterator"
                  - "kinesis:GetRecords"
                Resource: !Ref AnalyticsStreamArn
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Join ["",["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:*"]]
              - Effect: Allow
                Action:
                  - "es:ESHttpPost"
                  - "es:ESHttpPut"
                  - "es:ESHttpDelete"
                  - "es:ESHttpGet"
                Resource: !Join ["", [!GetAtt OpensearchServiceDomain.Arn, "/*"]]
              - Effect: Allow
                Action:
                  - "es:DescribeOpensearchDomain"
                  - "es:GetCompatibleOpensearchVersions"
                  - "es:DescribeOpensearchDomains"
                Resource: !GetAtt OpensearchServiceDomain.Arn
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${MieDataplaneBucket}/*"
Outputs:
  DomainEndpoint:
    Value: !GetAtt OpensearchServiceDomain.DomainEndpoint
  DomainArn:
    Value: !GetAtt OpensearchServiceDomain.Arn
